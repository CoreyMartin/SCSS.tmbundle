{	scopeName = 'source.scss';
	comment = 'Complete Rewrite of the SCSS Grammar by Mario "Kuroir" Ricalde (http://kuroir.com)';
	fileTypes = ('scss');
	foldingStartMarker = '/\*\*(?!\*)|\{\s*($|/\*(?!.*?\*/.*\S))';
	foldingStopMarker = '(?<!\*)\*\*/|^\s*\}';
	patterns = (
		{ comment="Variable setting";},
		{ include = '#variable_setting';},
		{ include = '#include';},
		{ include = '#import';},
		{ include = '#general'; },
		{ include = '#flow_control'; },
		{ comment="Yes, we need the rules at root level available for nesting.";},
		{ include = '#rules';},
		{ comment="Properties";},
		{ include = '#property_list';},
		{ comment="Mixin with Attributes";},
		{	name = 'meta.at-rule.mixin.scss';
		// Tienes que poner el nombre dle mixin dentro de la regla
		 begin = "^\s*((@)mixin) ([\w-]{1,})\s{0,2}\(";
		 end = '\)';
		 captures = {
			 1 = { name = 'keyword.control.at-rule.mixin.scss'; };
			 2 = { name = 'punctuation.definition.keyword.scss'; };
			 3 = { name = 'entity.name.function.scss'; };
		 };
		 patterns = (
			 { include = '#mixin_attributes';},
		 );
		},
		{	name = 'meta.at-rule.mixin.scss';
		 match = "^\s*((@)mixin) ([\w-]{1,})";
		 captures = {
			 1 = { name = 'keyword.control.at-rule.mixin.scss'; };
			 2 = { name = 'punctuation.definition.keyword.scss'; };
			 3 = { name = 'entity.name.function.scss'; };
		 };
		},
		
	);
	comment = 'The Magic happens here. Rewrite by Mario "Kuroir" Ricalde';
	repository = {
		// Stuff that should be available everywhere
		general = {
			comment = 'Stuff that should be everywhere';
			patterns = (
				{ include = '#variable'; },
				{ include = '#comment_block'; },
				{ include = '#comment_line'; },
			);
		};
		rules = {
			patterns = (
				{	include = '#general'; },
				{ include = '#extend';},
				{	include = '#include'; },
				{	include = '#selectors'; },
				{	name = 'meta.property-name.css';
					begin = '(?<![-a-z])(?=[-a-z])';
					end = '$|(?![-a-z])';
					patterns = (
						{ include = '#property_names'; },
						{	include = '#include'; },
					);
				},
				{	name = 'meta.property-value.css';
					comment = 'Kuroir: fixed nested elements for sass.';
					begin = '(:)\s{0,}(?!(\s{0,}{))';
					end = '\s*(;|(?=\}))';
					beginCaptures = { 1 = { name = 'punctuation.separator.key-value.css'; }; };
					endCaptures = { 1 = { name = 'punctuation.terminator.rule.css'; }; };
					patterns = (
						{ include = '#general'; },
						{ include = '#property_values'; },
					);
				},	
			);
		};
		// Property Values: property-name:<this>;
		property_values = {
			comment = 'Stuff that should only be available on values.';
			patterns = (
				{ include = '#string_single'; },
				{ include = '#string_double'; },
				{ include = '#constant_functions'; },
				{ include = '#constant_hex'; },
				{ include = '#constant_rgb'; },
				{ include = '#constant_rgb_percentage'; },
				{ include = '#constant_important'; },
				{ include = '#constant_unit'; },
				{ include = '#constant_property_value'; },
				{ include = '#constant_number'; },
				{ include = '#constant_font'; },
				{ include = '#constant_color'; },
				{ include = '#constant_depracated_color'; },
				{ include = '#constant_mathematical_symbols'; },
			);
		};
		property_names = {
			patterns = (
				{ include = '#property_name'; },
				{ include = '#property_name_error'; },
			);
		};
		// Property Names: background-color
		property_name = {
			name = 'support.type.property-name.css';
			comment = 'Reversal order is important; KEEP IT. Also when adding new properties add them to the error checker below!';
			match = '\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space-collapse|white-space|volume|voice-volume|voice-stress|voice-rate|voice-pitch-range|voice-pitch|voice-family|voice-duration|voice-balance|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|top|text-wrap|text-transform|text-shadow|text-replace|text-outline|text-justify|text-indent|text-height|text-emphasis|text-decoration|text-align-last|text-align|target-position|target-new|target-name|target|table-layout|tab-side|string-set|stress|speech-rate|speak-punctuation|speak-numeral|speak-header|speak|size|ruby-span|ruby-position|ruby-overhang|ruby-align|rotation-point|rotation|right|richness|rest-before|rest-after|rest|resize|rendering-intent|quotes|punctuation-trim|presentation-level|position|play-during|pitch-range|pitch|phonemes|pause-before|pause-after|pause|page-policy|page-break-inside|page-break-before|page-break-after|page|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-style|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|opacity|nav-up|nav-right|nav-left|nav-index|nav-down|move-to|min-width|min-height|max-width|max-height|marquee-style|marquee-speed|marquee-play-count|marquee-direction|marks|mark-before|mark-after|mark|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-stacking-strategy|line-stacking-shift|line-stacking-ruby|line-stacking|line-height|letter-spacing|left|inline-box-align|image-resolution|image-orientation|icon|hyphens|hyphenate-resource|hyphenate-lines|hyphenate-character|hyphenate-before|hyphenate-after|height|hanging-punctuation|grid-rows|grid-columns|font-weight|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-family|font|float-offset|float|fit-position|fit|empty-cells|elevation|drop-initial-value|drop-initial-size|drop-initial-before-align|drop-initial-before-adjust|drop-initial-after-align|drop-initial-after-adjust|dominant-baseline|display-role|display-model|display|direction|cursor|cue-before|cue-after|cue|crop|counter-reset|counter-increment|content|columns|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|column-break-before|column-break-after|color-profile|color|clip|clear|caption-side|box-sizing|box-shadow|box-pack|box-orient|box-ordinal-group|box-lines|box-flex-group|box-flex|box-direction|box-decoration-break|box-align|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-length|border-left-width|border-left-style|border-left-color|border-left|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|bookmark-target|bookmark-level|bookmark-label|binding|baseline-shift|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-break|background-attachment|background|azimuth|appearance|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-duration|animation-direction|animation-delay|animation|alignment-baseline|alignment-adjust)\b';
		};
		property_name_error = {
			name = 'invalid.illegal';
			match = '(?<![a-z-])(?!z-index\b|word-wrap\b|word-spacing\b|word-break\b|width\b|widows\b|white-space-collapse\b|white-space\b|volume\b|voice-volume\b|voice-stress\b|voice-rate\b|voice-pitch-range\b|voice-pitch\b|voice-family\b|voice-duration\b|voice-balance\b|visibility\b|vertical-align\b|unicode-bidi\b|transition-timing-function\b|transition-property\b|transition-duration\b|transition-delay\b|transition\b|top\b|text-wrap\b|text-transform\b|text-shadow\b|text-replace\b|text-outline\b|text-justify\b|text-indent\b|text-height\b|text-emphasis\b|text-decoration\b|text-align-last\b|text-align\b|target-position\b|target-new\b|target-name\b|target\b|table-layout\b|tab-side\b|string-set\b|stress\b|speech-rate\b|speak-punctuation\b|speak-numeral\b|speak-header\b|speak\b|size\b|ruby-span\b|ruby-position\b|ruby-overhang\b|ruby-align\b|rotation-point\b|rotation\b|right\b|richness\b|rest-before\b|rest-after\b|rest\b|resize\b|rendering-intent\b|quotes\b|punctuation-trim\b|presentation-level\b|position\b|play-during\b|pitch-range\b|pitch\b|phonemes\b|pause-before\b|pause-after\b|pause\b|page-policy\b|page-break-inside\b|page-break-before\b|page-break-after\b|page\b|padding-top\b|padding-right\b|padding-left\b|padding-bottom\b|padding\b|overflow-y\b|overflow-x\b|overflow-style\b|overflow\b|outline-width\b|outline-style\b|outline-offset\b|outline-color\b|outline\b|orphans\b|opacity\b|nav-up\b|nav-right\b|nav-left\b|nav-index\b|nav-down\b|move-to\b|min-width\b|min-height\b|max-width\b|max-height\b|marquee-style\b|marquee-speed\b|marquee-play-count\b|marquee-direction\b|marks\b|mark-before\b|mark-after\b|mark\b|margin-top\b|margin-right\b|margin-left\b|margin-bottom\b|margin\b|list-style-type\b|list-style-position\b|list-style-image\b|list-style\b|line-stacking-strategy\b|line-stacking-shift\b|line-stacking-ruby\b|line-stacking\b|line-height\b|letter-spacing\b|left\b|inline-box-align\b|image-resolution\b|image-orientation\b|icon\b|hyphens\b|hyphenate-resource\b|hyphenate-lines\b|hyphenate-character\b|hyphenate-before\b|hyphenate-after\b|height\b|hanging-punctuation\b|grid-rows\b|grid-columns\b|font-weight\b|font-variant\b|font-style\b|font-stretch\b|font-size-adjust\b|font-size\b|font-family\b|font\b|float-offset\b|float\b|fit-position\b|fit\b|empty-cells\b|elevation\b|drop-initial-value\b|drop-initial-size\b|drop-initial-before-align\b|drop-initial-before-adjust\b|drop-initial-after-align\b|drop-initial-after-adjust\b|dominant-baseline\b|display-role\b|display-model\b|display\b|direction\b|cursor\b|cue-before\b|cue-after\b|cue\b|crop\b|counter-reset\b|counter-increment\b|content\b|columns\b|column-width\b|column-span\b|column-rule-width\b|column-rule-style\b|column-rule-color\b|column-rule\b|column-gap\b|column-fill\b|column-count\b|column-break-before\b|column-break-after\b|color-profile\b|color\b|clip\b|clear\b|caption-side\b|box-sizing\b|box-shadow\b|box-pack\b|box-orient\b|box-ordinal-group\b|box-lines\b|box-flex-group\b|box-flex\b|box-direction\b|box-decoration-break\b|box-align\b|bottom\b|border-width\b|border-top-width\b|border-top-style\b|border-top-right-radius\b|border-top-left-radius\b|border-top-color\b|border-top\b|border-style\b|border-spacing\b|border-right-width\b|border-right-style\b|border-right-color\b|border-right\b|border-radius\b|border-length\b|border-left-width\b|border-left-style\b|border-left-color\b|border-left\b|border-image\b|border-color\b|border-collapse\b|border-bottom-width\b|border-bottom-style\b|border-bottom-right-radius\b|border-bottom-left-radius\b|border-bottom-color\b|border-bottom\b|border\b|bookmark-target\b|bookmark-level\b|bookmark-label\b|binding\b|baseline-shift\b|background-size\b|background-repeat\b|background-position\b|background-origin\b|background-image\b|background-color\b|background-clip\b|background-break\b|background-attachment\b|background\b|azimuth\b|appearance\b|animation-timing-function\b|animation-play-state\b|animation-name\b|animation-iteration-count\b|animation-duration\b|animation-direction\b|animation-delay\b|animation\b|alignment-baseline\b|alignment-adjust\b)[a-z\-\_]+';
		};
		variable_setting = {
			name = 'meta.set.variable';
				begin = '(\$[\w\-]+)\s{0,}(:)';
				end = ';';
				captures = {
					1 = { name = 'variable';};
					2 = { name = 'punctuation';};
				};
				patterns = (
					{include = '#property_values';},
					{include = '#variable';}
				);
		};
		// Selectors #something.more:hover
		selectors = {
			comment = 'Stuff for Selectors.';
			patterns = (
				{ include = '#selector_entities'; },
				{ include = '#selector_class'; },
				{ include = '#selector_id'; },
				{ include = '#selector_pseudo_class'; },
				{ include = '#tag_wildcard'; },
				{ include = '#tag_parent_reference'; },
				{ include = '#selector_pseudo_element'; },
				{ include = '#selector_attribute'; },
			);
		};
		// @mixin <this>() {}
		mixin_name = {
			name = 'entity.name.function.scss';
			match = '[\w-]{1,}';
		};
		// Mixin Attributes @mixin something(<this>)
		mixin_attributes = {
			patterns = (
			  { name = 'punctuation.definition';
				match = ':';
			  },
			  { include = '#general';},
			  { include = '#property_values';},
			  { name = 'invalid.illegal';
				comment = 'We even have error highlighting <3';
				match = '[=\{\}\?\;\@]';
			  }
			);
		};
		variable = {
			patterns = (
				{	include = '#variables';},
				{	include = '#interpolation';}
			);
		};
		// Variables $hello
		variables = {
			name = 'variable.scss';
			match = '(\s*)(\$[a-zA-Z0-9_-]+)';
			captures = {
				1 = {
					name = 'variable.scss';
				};
			};
		};
		interpolation = {
			name = 'variable.interpolation.scss';
			begin = '#\{';
			end = '\}';
			patterns = (
				{	include = '#variable';}
			);
		};
		// This is a line comment
		comment_line = {
			comment = 'Revamped';
			name = 'comment.line.scss';
			begin = '(\s{0,})//';
			end = '$(\s{0,})';
		};
		// Comment Block /* Oh my */
		comment_block = {
			comment = "Revamped Comment block.";
			name = 'comment.block.scss';
			begin = '\s{0,}/\*';
			end = '(\*/)\s{0,}';
			captures = {
				0 = { name = 'punctuation.whitespace.comment.trailing.scss'; };
			};
		};
		// Property List
		property_list = {	name = 'meta.property-list.css';
			begin = '\{';
			end = '\}';
			captures = { 0 = { name = 'punctuation.section.property-list.css'; }; };
			patterns = (
				{	include = '#flow_control'; },
				{	include = '#rules'; },
			);
		};
		// String Double "stringor"
		string_double = {
			name = 'string.quoted.double.css';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.css'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.css'; }; };
			patterns = (
				{	name = 'constant.character.escape.css';
					match = '\\.';
				},
			);
		};
		// String Single 'singler'
		string_single = {
			name = 'string.quoted.single.css';
			begin = "'";
			end = "'";
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.css'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.css'; }; };
			patterns = (
				{	name = 'constant.character.escape.css';
					match = '\\.';
				},
			);
		};
		// Constant Functions: url() etc
		constant_functions = {
			begin = '(rgb|url|attr|counter|counters)\s*(\()';
			end = '(\))';
			beginCaptures = {
				1 = { name = 'support.function.misc.css'; };
				2 = { name = 'punctuation.section.function.css'; };
			};
			endCaptures = { 1 = { name = 'punctuation.section.function.css'; }; };
			patterns = (
				{	include = '#general'; },
				{	include = '#string_single'; },
				{	include = '#string_double'; },
			);
		};
		// Hex #FFFFFF
		constant_hex = {
			name = 'constant.other.color.rgb-value.css';
			match = '(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\b';
			captures = { 1 = { name = 'punctuation.definition.constant.css'; }; };
		};
		// Hex rgb()
		constant_rgb = {
			name = 'constant.other.color.rgb-value.css';
			match = '(\b0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\s*,\s*)(0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\s*,\s*)(0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\b)';
		};
		constant_rgb_percentage = {
			name = 'constant.other.color.rgb-percentage.css';
			match = '\b([0-9]{1,2}|100)\s*%,\s*([0-9]{1,2}|100)\s*%,\s*([0-9]{1,2}|100)\s*%';
		};
		// Constant Important
		constant_important = {
			name = 'keyword.other.important.css';
			match = '\!\s*important';
		};
		// Unit 30<px> <- this
		constant_unit = {
			name = 'meta.property-value.constant.named-color.css.keyword.other.unit.css';
			match = '(?<=[\d])(px|pt|cm|mm|in|em|ex|pc)\b|%';
		};
		// Keywords for values
		constant_property_value = {
			name = 'support.constant.property-value.css';
			match = '\b(absolute|all-scroll|always|armenian|auto|baseline|below|bidi-override|block|bold|bolder|both|bottom|break-all|break-word|capitalize|center|char|circle|cjk-ideographic|col-resize|collapse|crosshair|dashed|decimal-leading-zero|decimal|default|disabled|disc|distribute-all-lines|distribute-letter|distribute-space|distribute|dotted|double|e-resize|ellipsis|fixed|georgian|groove|hand|hebrew|help|hidden|hiragana-iroha|hiragana|horizontal|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space|inactive|inherit|inline-block|inline|inset|inside|inter-ideograph|inter-word|italic|justify|katakana-iroha|katakana|keep-all|left|lighter|line-edge|line-through|line|list-item|loose|lower-alpha|lower-greek|lower-latin|lower-roman|lowercase|lr-tb|ltr|medium|middle|move|n-resize|ne-resize|newspaper|no-drop|no-repeat|nw-resize|none|normal|not-allowed|nowrap|oblique|outset|outside|overline|pointer|progress|relative|repeat-x|repeat-y|repeat|right|ridge|row-resize|rtl|s-resize|scroll|se-resize|separate|small-caps|solid|square|static|strict|super|sw-resize|table-footer-group|table-header-group|tb-rl|text-bottom|text-top|text|thick|thin|top|transparent|underline|upper-alpha|upper-latin|upper-roman|uppercase|vertical-ideographic|vertical-text|visible|w-resize|wait|whitespace|zero)\b';
		};
		// Numbers: 1337
		constant_number = {
			name = 'meta.property-value.constant.numeric.css';
			match = '(-|\+)?\s*[0-9]+(\.[0-9]+)?';
		};
		// Fonts: arial, comic
		constant_font = {
			name = 'support.constant.font-name.css';
			match = '(\b(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)\b)';
		};
		// Don't use this colors
		constant_depracated_color = {
			name = 'invalid.deprecated.color.w3c-non-standard-color-name.css';
			comment = 'These colours are mostly recognised but will not validate. ref: http://www.w3schools.com/css/css_colornames.asp';
			match = '\b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\b';
		};
		// Color names: red
		constant_color = {
			name = 'support.constant.color.w3c-standard-color-name.css';
			comment = 'http://www.w3.org/TR/CSS21/syndata.html#value-def-color';
			match = '\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\b';
		};
		// Wild Card *
		tag_wildcard = {
			name = 'entity.name.tag.wildcard.css';
			match = '\*';
		};
		// Tag Reference: & div {}
		tag_parent_reference = {
			name = 'entity.name.tag.reference.css';
			match = '\&';
		};
		// Selectors More than meet the eye
		selector_attribute = {
			name = 'meta.attribute-selector.css';
			match = '(?i)(\[)\s*(-?[_a-z\\[[:^ascii:]]][_a-z0-9\-\\[[:^ascii:]]]*)(?:\s*([~|^$*]?=)\s*(?:(-?[_a-z\\[[:^ascii:]]][_a-z0-9\-\\[[:^ascii:]]]*)|((?>([''"])(?:[^\\]|\\.)*?(\6)))))?\s*(\])';
			captures = {
				1 = { name = 'punctuation.definition.entity.css'; };
				2 = { name = 'entity.other.attribute-name.attribute.css'; };
				3 = { name = 'punctuation.separator.operator.css'; };
				4 = { name = 'string.unquoted.attribute-value.css'; };
				5 = { name = 'string.quoted.double.attribute-value.css'; };
				6 = { name = 'punctuation.definition.string.begin.css'; };
				7 = { name = 'punctuation.definition.string.end.css'; };
			};
		};
		// Entities a.k.a HTML tags
		selector_entities = {
			name = 'entity.name.tag.css';
      match = '\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|
                      br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|
                      details|dfn|div|dl|dt|em|embed|fieldset|figure|footer|form|frame|frameset|
                      (h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|
                      label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|
                      ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|
                      section|select|small|source|span|strike|strong|sub|sup|table|tbody|td|
                      textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\b';
		};
		// Class .my_class
		selector_class = {
			name = 'entity.other.attribute-name.class.css';
			match = '(\.)[a-zA-Z0-9_-]+';
			captures = { 1 = { name = 'punctuation.definition.entity.css'; }; };
		};
		// Id #my_id
		selector_id = {
			name = 'entity.other.attribute-name.id.css';
			match = '(#)[a-zA-Z][a-zA-Z0-9_-]*';
			captures = { 1 = { name = 'punctuationctuation.definition.entity.css'; }; };
		};
		// Pseudo Class a:hover
		selector_pseudo_class = {
			name = 'entity.other.attribute-name.pseudo-class.css';
			match = '(:)\b(active|hover|link|visited|focus)\b';
			captures = { 1 = { name = 'punctuation.definition.entity.css'; }; };
		};
		// Pseudo Element a:after
		selector_pseudo_element = {
			name = 'entity.other.attribute-name.pseudo-element.css';
			match = '(:+)\b(after|before|first-child|first-letter|first-line|selection)\b';
			captures = { 1 = { name = 'punctuation.definition.entity.css'; }; };
		};
		// Include
		include = {
			name = 'meta.at-rule.include.css';
			begin = '\s*((@)(include)\b)';
			end = '\s*((?=;|\}))';
			captures = {
				1 = { name = 'keyword.control.at-rule.import.css'; };
				2 = { name = 'punctuation.definition.keyword.css'; };
			};
			patterns = (

				{	begin = '(url)\s*(\()\s*';
					end = '\s*(\))\s*';
					beginCaptures = {
						1 = { name = 'support.function.url.css'; };
						2 = { name = 'punctuation.section.function.css'; };
					};
					endCaptures = { 1 = { name = 'punctuation.section.function.css'; }; };
					patterns = (
						{	name = 'variable.parameter.url.css';
							match = '[^''") \t]+';
						},
						{	include = '#string_single'; },
						{	include = '#string_double'; },
					);
				},
				{	begin = '([\w-]{1,})(\()\s*';
					end = '\s*(\))\s*';
					beginCaptures = {
						1 = { name = 'support.function.css'; };
						2 = { name = 'punctuation.section.function.css'; };
					};
					endCaptures = { 1 = { name = 'punctuation.section.function.css'; }; };
					patterns = (
						{	name = 'variable.parameter.url.css';
							match = '[^''") \t]+';
						},
					);
				},
			);
		};
		// Import
		import = {
			name = 'meta.at-rule.import.css';
			begin = '\s*((@)(import)\b)';
			end = '\s*((?=;|\}))';
			captures = {
				1 = { name = 'keyword.control.at-rule.import.css'; };
				2 = { name = 'punctuation.definition.keyword.css'; };
			};
			patterns = (
				{	include = '#variable'; },
				{	include = '#string_single'; },
				{	include = '#string_double'; },
				{	begin = '(url)\s*(\()\s*';
					end = '\s*(\))\s*';
					beginCaptures = {
						1 = { name = 'support.function.url.css'; };
						2 = { name = 'punctuation.section.function.css'; };
					};
					endCaptures = { 1 = { name = 'punctuation.section.function.css'; }; };
					patterns = (
						{	name = 'variable.parameter.url.css';
							match = '[^''") \t]+';
						},
						{	include = '#string_single'; },
						{	include = '#string_double'; },
					);
				},
				{	begin = '([\w-]{1,})(\()\s*';
					end = '\s*(\))\s*';
					beginCaptures = {
						1 = { name = 'support.function.css'; };
						2 = { name = 'punctuation.section.function.css'; };
					};
					endCaptures = { 1 = { name = 'punctuation.section.function.css'; }; };
					patterns = (
						{	name = 'variable.parameter.url.css';
							match = '[^''") \t]+';
						},
					);
				},
			);
		};
		// @extend
		extend = {
			name = 'meta.at-rule.import.css';
			begin = '\s*((@)(extend)\b)';
			end = '\s*((?=;))';
			captures = {
				1 = { name = 'keyword.control.at-rule.import.css'; };
				2 = { name = 'punctuation.definition.keyword.css'; };
			};
			patterns = (
				{	include = '#variable'; },
				{	include = '#selectors';}
			);	
		};
		flow_control = {
			patterns = (
				{ include = '#if';},
				{ include = '#else';},
				{ include = '#warn';},
				{ include = '#for';},
				{ include = '#while';},
			);
		};
		// IF
		if = {
			name = 'meta.at-rule.if.sccs';
			begin = '\s{0,}((@)(if)\b)';
			end = '(?={)';
			captures = {
				1 = { name = 'keyword.control.if.scss';};
			};
			patterns = (
				{
					name = 'keyword.control.operator';
					match = '\b(==|!=|<=|>=|<|>|not|or)\b';
				},
				{	include = '#variable'; },
				{	include = '#property_values';},

			);
		};
		else = {
			name = 'meta.at-rule.else.sccs';
			begin = '\s*((@)(else)\b)';
			end = '(?={)';
			captures = {
				1 = { name = 'keyword.control.else.scss';};
			};
			patterns = (
				{
					name = 'keyword.control.operator';
					match = '\b(==|!=|<=|>=|<|>|not|or|if)\b';
				},
				{	include = '#variable'; },
				{	include = '#property_values';},
			);
		};
		warn = {
			name = 'meta.at-rule.warn.sccs';
			begin = '\s*((@)(warn)\b)';
			end = '(?=\;)';
			captures = {
				1 = { name = 'keyword.control.warn.scss';};
			};
			patterns = (
				{	include = '#variable'; },
				{	include = '#string_double'; },
				{	include = '#string_single'; }
			);
		};
		for = {
			name = 'meta.at-rule.for.sccs';
			begin = '\s{0,}((@)(for)\b)';
			end = '(?={)';
			captures = {
				1 = { name = 'keyword.control.for.scss';};
			};
			patterns = (
				{
					name = 'keyword.control.operator';
					match = '\b(==|!=|<=|>=|<|>|from|through)\b';
				},
				{	include = '#variable'; },
				{	include = '#property_values';},
				{	include = '$self'; }
			);
		};
		while = {
			name = 'meta.at-rule.while.sccs';
			begin = '\s{0,}((@)(while)\b)';
			end = '(?={)';
			captures = {
				1 = { name = 'keyword.control.while.scss';};
			};
			patterns = (
				{
					name = 'keyword.control.operator';
					match = '\b(==|!=|<=|>=|<|>|not)\b';
				},
				{	include = '#variable'; },
				{	include = '#property_values';},
			);
		};
	};
}